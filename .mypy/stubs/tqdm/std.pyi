from .utils import Comparable
from _typeshed import Incomplete
from collections.abc import Generator

class TqdmTypeError(TypeError): ...
class TqdmKeyError(KeyError): ...

class TqdmWarning(Warning):
    def __init__(self, msg, fp_write: Incomplete | None = ..., *a, **k) -> None: ...

class TqdmExperimentalWarning(TqdmWarning, FutureWarning): ...
class TqdmDeprecationWarning(TqdmWarning, DeprecationWarning): ...
class TqdmMonitorWarning(TqdmWarning, RuntimeWarning): ...

class TqdmDefaultWriteLock:
    th_lock: Incomplete
    locks: Incomplete
    def __init__(self) -> None: ...
    def acquire(self, *a, **k) -> None: ...
    def release(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, *exc) -> None: ...
    @classmethod
    def create_mp_lock(cls) -> None: ...
    @classmethod
    def create_th_lock(cls) -> None: ...

class Bar:
    ASCII: str
    UTF: Incomplete
    BLANK: str
    COLOUR_RESET: str
    COLOUR_RGB: str
    COLOURS: Incomplete
    frac: Incomplete
    default_len: Incomplete
    charset: Incomplete
    def __init__(
        self, frac, default_len: int = ..., charset=..., colour: Incomplete | None = ...
    ) -> None: ...
    @property
    def colour(self): ...
    @colour.setter
    def colour(self, value) -> None: ...
    def __format__(self, format_spec): ...

class EMA:
    alpha: Incomplete
    last: int
    calls: int
    def __init__(self, smoothing: float = ...) -> None: ...
    def __call__(self, x: Incomplete | None = ...): ...

class tqdm(Comparable):
    monitor_interval: int
    monitor: Incomplete
    @staticmethod
    def format_sizeof(num, suffix: str = ..., divisor: int = ...): ...
    @staticmethod
    def format_interval(t): ...
    @staticmethod
    def format_num(n): ...
    @staticmethod
    def status_printer(file): ...
    @staticmethod
    def format_meter(
        n,
        total,
        elapsed,
        ncols: Incomplete | None = ...,
        prefix: str = ...,
        ascii: bool = ...,
        unit: str = ...,
        unit_scale: bool = ...,
        rate: Incomplete | None = ...,
        bar_format: Incomplete | None = ...,
        postfix: Incomplete | None = ...,
        unit_divisor: int = ...,
        initial: int = ...,
        colour: Incomplete | None = ...,
        **extra_kwargs
    ): ...
    def __new__(cls, *_, **__): ...
    @classmethod
    def write(
        cls, s, file: Incomplete | None = ..., end: str = ..., nolock: bool = ...
    ) -> None: ...
    @classmethod
    def external_write_mode(
        cls, file: Incomplete | None = ..., nolock: bool = ...
    ) -> Generator[None, None, None]: ...
    @classmethod
    def set_lock(cls, lock) -> None: ...
    @classmethod
    def get_lock(cls): ...
    @classmethod
    def pandas(cls, **tqdm_kwargs): ...
    iterable: Incomplete
    disable: Incomplete
    pos: Incomplete
    n: Incomplete
    total: Incomplete
    leave: Incomplete
    desc: Incomplete
    fp: Incomplete
    ncols: Incomplete
    nrows: Incomplete
    mininterval: Incomplete
    maxinterval: Incomplete
    miniters: Incomplete
    dynamic_miniters: Incomplete
    ascii: Incomplete
    unit: Incomplete
    unit_scale: Incomplete
    unit_divisor: Incomplete
    initial: Incomplete
    lock_args: Incomplete
    delay: Incomplete
    gui: Incomplete
    dynamic_ncols: Incomplete
    smoothing: Incomplete
    bar_format: Incomplete
    postfix: Incomplete
    colour: Incomplete
    last_print_n: Incomplete
    sp: Incomplete
    last_print_t: Incomplete
    start_t: Incomplete
    def __init__(
        self,
        iterable: Incomplete | None = ...,
        desc: Incomplete | None = ...,
        total: Incomplete | None = ...,
        leave: bool = ...,
        file: Incomplete | None = ...,
        ncols: Incomplete | None = ...,
        mininterval: float = ...,
        maxinterval: float = ...,
        miniters: Incomplete | None = ...,
        ascii: Incomplete | None = ...,
        disable: bool = ...,
        unit: str = ...,
        unit_scale: bool = ...,
        dynamic_ncols: bool = ...,
        smoothing: float = ...,
        bar_format: Incomplete | None = ...,
        initial: int = ...,
        position: Incomplete | None = ...,
        postfix: Incomplete | None = ...,
        unit_divisor: int = ...,
        write_bytes: Incomplete | None = ...,
        lock_args: Incomplete | None = ...,
        nrows: Incomplete | None = ...,
        colour: Incomplete | None = ...,
        delay: int = ...,
        gui: bool = ...,
        **kwargs
    ) -> None: ...
    def __bool__(self): ...
    def __nonzero__(self): ...
    def __len__(self): ...
    def __reversed__(self): ...
    def __contains__(self, item): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...
    def __del__(self) -> None: ...
    def __hash__(self): ...
    def __iter__(self): ...
    def update(self, n: int = ...): ...
    def close(self) -> None: ...
    def clear(self, nolock: bool = ...) -> None: ...
    def refresh(self, nolock: bool = ..., lock_args: Incomplete | None = ...): ...
    def unpause(self) -> None: ...
    def reset(self, total: Incomplete | None = ...) -> None: ...
    def set_description(
        self, desc: Incomplete | None = ..., refresh: bool = ...
    ) -> None: ...
    def set_description_str(
        self, desc: Incomplete | None = ..., refresh: bool = ...
    ) -> None: ...
    def set_postfix(
        self, ordered_dict: Incomplete | None = ..., refresh: bool = ..., **kwargs
    ) -> None: ...
    def set_postfix_str(self, s: str = ..., refresh: bool = ...) -> None: ...
    def moveto(self, n) -> None: ...
    @property
    def format_dict(self): ...
    def display(self, msg: Incomplete | None = ..., pos: Incomplete | None = ...): ...
    @classmethod
    def wrapattr(
        cls,
        stream,
        method,
        total: Incomplete | None = ...,
        bytes: bool = ...,
        **tqdm_kwargs
    ) -> Generator[Incomplete, None, None]: ...

def trange(*args, **kwargs): ...
